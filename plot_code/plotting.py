from turtle import color
import numpy as np
import matplotlib.pyplot as plt
import os
from scipy import interpolate
# from scipy.interpolate import spline

def Extract(lst, index):
    return [item[index] for item in lst]

atoms_num = 923
timestep_1 = 1 
tau = 1000 * timestep_1
delQ = 50 #eV


list_val = [
[-3337.87 , 127.189],
[-3310.63 , 187.442],
[-3287.49 , 260.41],
[-3270.71 , 391.28],
[-3253.67 , 513.173],
[-3239.65 , 544.126],
[-3227.84 , 482.088],
[-3220.13 , 481.786],
[-3208.77 , 635.704],
[-3197.85 , 686.172],
[-3186.61 , 623.63],
[-3177.85 , 602.734],
[-3167.62 , 606.256],
[-3159.66 , 707.471],
[-3151.38 , 745.994],
[-3142.41 , 747.807],
[-3135.83 , 747.519],
[-3128.47 , 749.186],
[-3121.71 , 774.514],
[-3115.24 , 790.599],
[-3108.48 , 802.152],
[-3102.36 , 802.067],
[-3095.76 , 805.204],
[-3089.34 , 830.483],
[-3083.16 , 842.315],
[-3077.96 , 839.1],
[-3072.64 , 864.038],
[-3067.83 , 893.778],
[-3063.27 , 884.417],
[-3059.78 , 909.61],
[-3056.06 , 916.055],
[-3052.95 , 923.792],
[-3049.75 , 924.705],
[-3046.22 , 921.901],
[-3042.79 , 955.811],
[-3040.18 , 930.786],
[-3038.7 , 951.338],
[-3036.69 , 955.557],
[-3034.36 , 978.993],
[-3032.6 , 977.2],
[-3031.08 , 985.838],
[-3029.15 , 980.926],
[-3027.59 , 983.925],
[-3027.22 , 989.904],
[-3025.98 , 980.008],
[-3024.45 , 989.8],
[-3023.34 , 996.494],
[-3022.29 , 994.263],
[-3021.22 , 1013.23],
[-3020.26 , 1011.48],
[-3018.81 , 1018.38],
[-3018.16 , 1005.38],
[-3017.81 , 1036.89],
[-3017.76 , 994.097],
[-3016.95 , 1008.31],
[-3016.49 , 1008.53],
[-3015.78 , 1000.05],
[-3016.26 , 1023.36],
[-3015.28 , 1027.06],
[-3014.99 , 1030.82],
[-3015.2 , 1016.49],
[-3015.14 , 1008.21],
[-3015.21 , 1037.14],
[-3014.56 , 1035.15],
[-3014.17 , 1032.12],
[-3015.12 , 1047.36],
[-3015.47 , 992.988],
[-3015.88 , 1050.86],
[-3015.53 , 1021.45],
[-3015.53 , 1024.44],
[-3015.06 , 1037.33],
[-3014.61 , 1034.68],
[-3015.02 , 1021.33],
[-3014.68 , 1009.36],
[-3013.52 , 1035.75],
[-3013.69 , 1029.97],
[-3013.22 , 1033.44],
[-3013.14 , 1017.83],
[-3013.4 , 1022.22],
[-3012.38 , 1020.76],
[-3012.37 , 1022.91],
[-3011.56 , 1042.8],
[-3011.43 , 1032.33],
[-3010.4 , 1050.64],
[-3010.38 , 1051.01],
[-3009.79 , 1053.38],
[-3010.23 , 1043.01],
[-3009.74 , 1077.07],
[-3009.3 , 1067.55],
[-3008.95 , 1053.71],
[-3007.72 , 1074.71],
[-3007.7 , 1074.14],
[-3006.27 , 1079.34],
[-3005.4 , 1122.19],
[-3005.66 , 1118.6],
[-3003.59 , 1110.12],
[-3002.21 , 1137.55],
[-3001.28 , 1171.15],
[-2999.81 , 1193.17],
[-2998.41 , 1239.62],
[-2996.34 , 1243.41],
[-2993.26 , 1274.78],
[-2990.2 , 1350.24],
[-2986.55 , 1391.28],

]


curve_list_1 = [
[-3337.87 , 127.189],
[-3310.63 , 187.442],
[-3287.49 , 260.41],
[-3270.71 , 391.28],
[-3253.67 , 513.173],
[-3239.65 , 544.126],
[-3227.84 , 482.088],
[-3220.13 , 481.786],
[-3208.77 , 635.704],
[-3197.85 , 686.172],
[-3186.61 , 623.63],
[-3177.85 , 602.734],
[-3167.62 , 606.256],
[-3159.66 , 707.471],
[-3151.38 , 745.994],
[-3142.41 , 747.807],
[-3135.83 , 747.519],

]

curve_list_2 = [

[-3040.18 , 930.786],
[-3038.7 , 951.338],
[-3036.69 , 955.557],
[-3034.36 , 978.993],
[-3032.6 , 977.2],
[-3031.08 , 985.838],
[-3029.15 , 980.926],
[-3027.59 , 983.925],
[-3027.22 , 989.904],
[-3025.98 , 980.008],
[-3024.45 , 989.8],
[-3023.34 , 996.494],
[-3022.29 , 994.263],
[-3021.22 , 1013.23],
[-3020.26 , 1011.48],
[-3018.81 , 1018.38],
[-3018.16 , 1005.38],
[-3017.81 , 1036.89],
[-3017.76 , 994.097],
[-3016.95 , 1008.31],
[-3016.49 , 1008.53],
[-3015.78 , 1000.05],
[-3016.26 , 1023.36],
[-3015.28 , 1027.06],
[-3014.99 , 1030.82],
[-3015.2 , 1016.49],
[-3015.14 , 1008.21],
[-3015.21 , 1037.14],
[-3014.56 , 1035.15],
[-3014.17 , 1032.12],
[-3015.12 , 1047.36],
[-3015.47 , 992.988],
[-3015.88 , 1050.86],
[-3015.53 , 1021.45],
[-3015.53 , 1024.44],
[-3015.06 , 1037.33],
[-3014.61 , 1034.68],
[-3015.02 , 1021.33],
[-3014.68 , 1009.36],
[-3013.52 , 1035.75],
[-3013.69 , 1029.97],
[-3013.22 , 1033.44],
[-3013.14 , 1017.83],
[-3013.4 , 1022.22],
[-3012.38 , 1020.76],
[-3012.37 , 1022.91],
[-3011.56 , 1042.8],
[-3011.43 , 1032.33],
[-3010.4 , 1050.64],
[-3010.38 , 1051.01],
[-3009.79 , 1053.38],
[-3010.23 , 1043.01],
[-3009.74 , 1077.07],
[-3009.3 , 1067.55],
[-3008.95 , 1053.71],
[-3007.72 , 1074.71],
[-3007.7 , 1074.14],
[-3006.27 , 1079.34],
[-3005.4 , 1122.19],
[-3005.66 , 1118.6],
[-3003.59 , 1110.12],

]

melting = np.array(Extract(curve_list_1,1))[-1]
#region plot start
x_axis = Extract(list_val,1)
y_axis = Extract(list_val,0)
# smoothed_mode = interpolate.interp1d(y_axis, x_axis, 'cubic')
# floor_range = np.linspace(min(y_axis), max(y_axis), 500)

curve_fit_x = np.array(Extract(curve_list_1,1))
curve_fit_y = np.array(Extract(curve_list_1,0))
curve_fit_x_high = np.array(Extract(curve_list_2,1))
curve_fit_y_high = np.array(Extract(curve_list_2,0))

a, b = np.polyfit(curve_fit_x, curve_fit_y, 1)
a_high, b_high = np.polyfit(curve_fit_x_high, curve_fit_y_high, 1)
latent_heat = -np.array(Extract(curve_list_1,0))[-1] + np.array(Extract(curve_list_2,0))[0]
plt.xlabel("Temperature (K)")
plt.ylabel("Total Energy (eV)")
plt.suptitle(f"Total Energy vs Temperature ( {atoms_num} atoms )")
plt.title(f"Tau = {tau} fs, timestep = {timestep_1} fs, Î”Q = {delQ} eV")
# plt.legend(f"{timestep_1} fs", loc = 2)
# plt.plot(smoothed_mode(floor_range), floor_range,ls='solid', color='crimson')

plt.plot(x_axis,y_axis,  'r-o')
plt.plot(curve_fit_x, a*curve_fit_x+b, color='black', linewidth=3)
plt.plot(curve_fit_x_high, a_high*curve_fit_x_high+b_high, color='black', linewidth=3)
plt.grid()
#endregion


# Save fig
path = os.path.join(f"{atoms_num} atoms")
save_path = os.path.join(path,f"{tau}_{timestep_1}_{delQ}_EvsT.png")
os.makedirs(path, exist_ok=True)
plt.text(x_axis[0],-3100,f'Heat Capacity - {round(a,5)} eV/K \nMelting point - {melting} K \nLatent heat - {round(latent_heat,5)} eV' ,fontsize=10, bbox=dict(facecolor='red', alpha=0.5) )
plt.legend(["Simulated","Curvefit"])
# plt.xticks(np.arange(min(x_axis), max(x_axis)+1, 200))
plt.savefig(save_path, bbox_inches='tight')
plt.show()
print()
